/*
 * Gradle build file for jHDF
 */
plugins {
    // Core plugins
	id 'java-library'
    id 'jacoco' // Code coverage
    id 'eclipse' // To create eclipse project
    id 'idea' // To create InteliJ project
    id 'maven-publish' // For the artifact collections to publish
    id 'signing' // For GPG signing artifacts
    // Community plugins (need versions)
    id 'com.jfrog.bintray' version '1.8.4' // For publishing to Bintray
    id 'org.sonarqube' version '2.6.2' // Code quality
}

// Varibles
group = 'io.jhdf'
version = '0.3.0'
sourceCompatibility = 1.8
targetCompatibility = 1.8

// In this section you declare where to find the dependencies of your project
repositories {
    // Use jcenter for resolving your dependencies.
    // You can declare any Maven/Ivy/file repository here.
    jcenter()
}

dependencies {
    // This dependency is exported to consumers, that is to say found on their compile classpath.
    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.8.0-beta2' // Need 1.8 for modules
	compile group: 'org.apache.commons', name: 'commons-lang3', version: '3.8.1'

    runtime group: 'org.slf4j', name: 'slf4j-simple', version: '1.8.0-beta2'
    
    // Use JUnit 5 test framework
    testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-api', version: '5.3.+'
	testCompile group: 'org.junit.jupiter', name: 'junit-jupiter-params', version: '5.3.+'
	testRuntime group: 'org.junit.jupiter', name: 'junit-jupiter-engine', version: '5.3.+'
    
    // Mocking
    testImplementation group: 'org.mockito', name: 'mockito-core', version: '2.23.+'
	// Matchers
	testCompile group: 'org.hamcrest', name: 'hamcrest-all', version: '1.3'
}

test {
	useJUnitPlatform()
	testLogging {
		events "passed", "skipped", "failed"
	}
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                   'Implementation-Version': project.version,
                   'Automatic-Module-Name': 'io.jhdf',
                   // OSGi headers
                   'Bundle-ManifestVersion': '2',
                   'Bundle-SymbolicName': 'io.jhdf',
                   'Bundle-Name': project.name,
                   'Bundle-Vendor': 'James Mudd',
                   'Export-Package': 'io.jhdf.*'
                   )
        exclude('io/jhdf/examples')
    }
}

task sourcesJar(type: Jar) {
    from sourceSets.main.allJava
    classifier = 'sources'
}

task javadocJar(type: Jar) {
    from javadoc
    classifier = 'javadoc'
}

publishing {
    publications {
        maven(MavenPublication) {
            from components.java 
            artifact sourcesJar
            artifact javadocJar
                        
            pom {
                name = 'jhdf'
                description = 'A pure Java HDF5 library'
                url = 'http://jhdf.io/'
                licenses {
                    license {
                        name = 'MIT License'
                        url = 'https://opensource.org/licenses/MIT'
                    }
                }
                developers {
                    developer {
                        id = 'jamesmudd'
                        name = 'James Mudd'
                        email = 'james.mudd@gmail.com'
                    }
                }
                scm {
                    connection = 'scm:git:git://github.com/jamesmudd/jhdf.git'
                    developerConnection = 'scm:git:git://github.com/jamesmudd/jhdf.git'
                    url = 'https://github.com/jamesmudd/jhdf.git'
                }
            }
        }
    }
}

signing {
    sign publishing.publications.maven
}

bintray {
    user = 'jamesmudd'
    key = System.getenv('BINTRAY_KEY')
    pkg {
        repo = 'jhdf'
        name = 'jhdf'
        userOrg = 'jamesmudd'
        licenses = ['MIT']
        vcsUrl = 'https://github.com/jamesmudd/jhdf.git'
        version {
            name = project.version
            desc = 'jHDF'
            released  = new Date()
        }
    }
    // Upload the 'maven' publication i.e jar, sourcesJar, javadocJar, POM
    publications = ['maven']
    // Use filesSpec to copy the signatures not sure this is the best way but it works
    filesSpec {
    	from "$buildDir/libs", "$buildDir/publications/maven/pom-default.xml.asc"
    	include "*.asc" // Signature files
    	into "io/jhdf/jhdf/${project.version}"
    	rename 'pom-default.xml.asc', "jhdf-${project.version}.pom.asc"
    }
    
}
